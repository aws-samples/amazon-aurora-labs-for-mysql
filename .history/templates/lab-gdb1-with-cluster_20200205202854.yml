---
## Amazon Aurora Labs for MySQL - Global Database Region 1
## Infrastructure template with an Aurora cluster for lab exercises
##
## Changelog:
## 2019-05-13 - Initial release
## 2019-05-29 - Changed how AZ selection works
## 2019-06-12 - Changed template to use Secrets MAnager for DB credentials
## 2019-06-13 - Preconfigured aws cli
## 2019-06-14 - Preconfigured DB credentials as ENV variables
## 2019-06-14 - Fixed issue with Scalable Target and uppercase cluster identifiers
## 2019-09-18 - Updated AMIs, Remove SSH access, bootstrap script changes for SSM
## 2019-09-19 - Fixed resource names to enable EE
## 2019-09-23 - Removed custom Lambda resource, using native role assignment
## 2019-09-23 - Removed !Sub references on static names to pass linter
## 2019-10-01 - edchan@ Forked for Global Database Infrastructure
## 2019-10-18 - Updates to Allowed Regions (Global database Availability)
## 2019-11-10 - Added Apache Superset EC2 launch
## 2019-11-26 - Split GDB Region 1 Ready Release; removed bastion
## 2019-11-29 - Primary Region disabled encryption (else Global DB will fail on adding fresh region)
## 2020-02-01 - Aurora 5.7 (2.07) DBcluster, DBclusterparametergroup, DBparametergroup  changes
## 2020-02-04 - Force Superset Version 0.30.0
##
## Dependencies:
## none
##
## License:
## This sample code is made available under the MIT-0 license. See the LICENSE file.

AWSTemplateFormatVersion: 2010-09-09
Description: Amazon Aurora Labs for MySQL - Global Database Workshop (Region1)

## Parameters
Parameters:
  gdbPrefix:
    Description: Default prefix for all resources in template
    Type: String
    Default: 'gdb1'
  dbMasterPassword:
    Description: The Aurora global database masteruser (admin) account password
    Type: String
    MinLength: 8
    MaxLength: 40
    AllowedPattern: ^[a-zA-Z0-9]*$
    Default: 'auroragdb321'
  amiIdLatestAmzn2:
    # Use public Systems Manager Parameter to retrieve latest Amazon Linux 2 AMI IDs
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'

## Conditions
Conditions:
  cond3AZs: !Equals [ !FindInMap [ RegionalSettings, !Ref "AWS::Region", azs ], "3" ]

## Mappings
Mappings:
  RegionalSettings:
    us-east-1:
      bastionAmi: ami-024582e76075564db
      bastionType: m4.large
      biappType: m5.large
      nodeType: db.r5.large
      name: N. Virginia
      azs: "3"    
    us-east-2:
      bastionAmi: ami-090a9429be63ca087
      bastionType: m4.large
      biappType: m5.large      
      nodeType: db.r5.large
      name: Ohio
      azs: "3"   
    us-west-2:
      bastionAmi: ami-09c08e9cd8d9c1b93
      bastionType: m4.large
      biappType: m5.large      
      nodeType: db.r5.large
      name: Oregon
      azs: "3"      
    eu-central-1:
      bastionAmi: ami-0fd6d676e2e90dc7b
      bastionType: m4.large
      biappType: m5.large      
      nodeType: db.r5.large
      name: Frankfurt
      azs: "3" 
    eu-west-1:
      bastionAmi: ami-08f053fa3d25478f4
      bastionType: m4.large
      biappType: m5.large      
      nodeType: db.r5.large
      name: Ireland
      azs: "3"      
    eu-west-2:
      bastionAmi: ami-012d95ddd53c98e0e
      bastionType: m4.large
      biappType: m5.large      
      nodeType: db.r5.large
      name: London
      azs: "3"       
    eu-west-3:
      bastionAmi: ami-0001c7938b8e89312
      bastionType: m5.large
      biappType: m5.large      
      nodeType: db.r5.large
      name: Paris
      azs: "3"     
    ap-southeast-1:
      bastionAmi: ami-0f8c65cdcc35d0a72
      bastionType: m4.large
      biappType: m5.large      
      nodeType: db.r5.large
      name: Singapore
      azs: "3"         
    ap-southeast-2:
      bastionAmi: ami-056280928f86f80a8
      bastionType: m4.large
      biappType: m5.large      
      nodeType: db.r5.large
      name: Sydney
      azs: "3"       
    ap-northeast-1:
      bastionAmi: ami-0193f3ddafc2d8921
      bastionType: m4.large
      biappType: m5.large      
      nodeType: db.r5.large
      name: Tokyo
      azs: "3"       
    ap-northeast-2:
      bastionAmi: ami-0b0d9551c4775f4e4
      bastionType: m5.large
      biappType: m5.large      
      nodeType: db.r5.large
      name: Seoul
      azs: "3"
  NetworkSettings:
    global:
      # Region 1 CIDR on 172.31.0.0/16 in the event peering is required
      vpcCidr: 172.31.0.0/16
      subPub1Cidr: 172.31.0.0/24
      subPub2Cidr: 172.31.1.0/24
      subPub3Cidr: 172.31.2.0/24
      subPrv1Cidr: 172.31.10.0/24
      subPrv2Cidr: 172.31.11.0/24
      subPrv3Cidr: 172.31.12.0/24
      sshSourceCidr: 0.0.0.0/0
  ClusterSettings:
    global:
      dbSchema: mylab
      dbDriver: mysql
    scaling:
      maxCapacity: 2
      minCapacity: 1
      cpuLoadTarget: 20
    sysbench:
      dbSchema: sbtpcc
      runTime: '300'
      numThreads: '4'
      numTables: '8'
      numWarehouses: '2'


## Resources
Resources:

## The VPC
  vpc:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      CidrBlock: !FindInMap [ NetworkSettings, global, vpcCidr ]
      Tags:
        - Key: Name
          Value: !Sub "${gdbPrefix}-vpc"

## Create an IGW & attach it to the VPC
  vpcIgw:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${gdbPrefix}-igw"
  attachIgwVpc:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref vpc
      InternetGatewayId: !Ref vpcIgw

## Create a public subnet in each AZ
  sub1Public:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref vpc
      CidrBlock: !FindInMap [ NetworkSettings, global, subPub1Cidr ]
      AvailabilityZone: !Select 
        - 0
        - Fn::GetAZs: !Ref 'AWS::Region'
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub "${gdbPrefix}-pub-sub-1"
  sub2Public:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref vpc
      CidrBlock: !FindInMap [ NetworkSettings, global, subPub2Cidr ]
      AvailabilityZone: !Select 
        - 1
        - Fn::GetAZs: !Ref 'AWS::Region'
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub "${gdbPrefix}-pub-sub-2"
  sub3Public:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref vpc
      CidrBlock: !FindInMap [ NetworkSettings, global, subPub3Cidr ]
      AvailabilityZone: !Select 
        - 2
        - Fn::GetAZs: !Ref 'AWS::Region'
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub "${gdbPrefix}-pub-sub-3"

## Associate the public subnets with a public route table
  rtbPublic:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref vpc
      Tags:
        - Key: Name
          Value: !Sub "${gdbPrefix}-public-rtb"
  rteToIgw:
    Type: AWS::EC2::Route
    DependsOn: attachIgwVpc
    Properties:
      RouteTableId: !Ref rtbPublic
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref vpcIgw
  srta1Public:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref sub1Public
      RouteTableId: !Ref rtbPublic
  srta2Public:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref sub2Public
      RouteTableId: !Ref rtbPublic
  srta3Public:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: cond3AZs
    Properties:
      SubnetId: !Ref sub3Public
      RouteTableId: !Ref rtbPublic

## Create a private subnet in each AZ
  sub1Private:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref vpc
      CidrBlock: !FindInMap [ NetworkSettings, global, subPrv1Cidr ]
      AvailabilityZone: !Select 
        - 0
        - Fn::GetAZs: !Ref 'AWS::Region'
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub "${gdbPrefix}-prv-sub-1"
  sub2Private:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref vpc
      CidrBlock: !FindInMap [ NetworkSettings, global, subPrv2Cidr ]
      AvailabilityZone: !Select 
        - 1
        - Fn::GetAZs: !Ref 'AWS::Region'
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub "${gdbPrefix}-prv-sub-2"
  sub3Private:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref vpc
      CidrBlock: !FindInMap [ NetworkSettings, global, subPrv3Cidr ]
      AvailabilityZone: !Select 
        - 2
        - Fn::GetAZs: !Ref 'AWS::Region'
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub "${gdbPrefix}-prv-sub-3"


## Create a NAT Gateway & EIP
  natEip:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  vpcNgw:
    Type: AWS::EC2::NatGateway
    DependsOn: attachIgwVpc
    Properties:
      AllocationId: !GetAtt natEip.AllocationId
      SubnetId: !Ref sub2Public

## Associate the private subnets with a NATed route table
  rtbNat:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref vpc
      Tags:
        - Key: Name
          Value: !Sub "${gdbPrefix}-nat-rtb"
  rteToNgw:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref rtbNat
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref vpcNgw
  srta1Ngw:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref sub1Private
      RouteTableId: !Ref rtbNat
  srta2Ngw:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref sub2Private
      RouteTableId: !Ref rtbNat
  srta3Ngw:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: cond3AZs
    Properties:
      SubnetId: !Ref sub3Private
      RouteTableId: !Ref rtbNat

## Create VPC S3 endpoint
  s3Enpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref vpc
      ServiceName: !Sub com.amazonaws.${AWS::Region}.s3
      RouteTableIds:
        - !Ref rtbPublic
        - !Ref rtbNat
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Principal: '*'
            Effect: 'Allow'
            Action: 's3:*'
            Resource: [ 'arn:aws:s3:::*', 'arn:aws:s3:::*/*' ]

## Create DB subnet group
  dbSubnets:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: !Sub ${gdbPrefix}-db-subnet-group
      SubnetIds: [ !Ref sub1Private, !Ref sub2Private, !Ref sub3Private ]
      Tags:
        - Key: Name
          Value: !Sub "${gdbPrefix}-db-subnet-group"

## Create bastion security group
  bastionSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref vpc
      GroupName: !Sub ${gdbPrefix}-bastion-host
      GroupDescription: Aurora Lab SSH Security Group
      Tags:
        - Key: Name
          Value: !Sub "${gdbPrefix}-bastion-host"

## Create Apache Superset security group
  supersetSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref vpc
      GroupName: !Sub ${gdbPrefix}-superset-host
      GroupDescription: Aurora Lab Apache Superset Security Group
      Tags:
        - Key: Name
          Value: !Sub "${gdbPrefix}-superset-host"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8088
          ToPort: 8088
          CidrIp: 0.0.0.0/0
          Description: Allows Apache Superset Webport (8088) access

## Create DB security group
  dbSecGroupCluster:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref vpc
      GroupName: !Sub ${gdbPrefix}-mysql-internal
      GroupDescription: Aurora Lab Database Firewall
      Tags:
        - Key: Name
          Value: !Sub "${gdbPrefix}-mysql-internal"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !Ref bastionSecGroup
          Description: Allows MySQL access from bastion host 
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !Ref supersetSecGroup
          Description: Allows MySQL access from Superset Instance

## Create NACL to simulate regional failure
  naclDenyAllAccess:
    Type: AWS::EC2::NetworkAcl
    Properties: 
      VpcId: !Ref vpc
      Tags: 
        - Key: Name
          Value: !Sub "${gdbPrefix}-nacl-denyall"

  naclEntryDenyAllEgress:
    Type: AWS::EC2::NetworkAclEntry
    Properties: 
      CidrBlock: 0.0.0.0/0
      Egress: true
      NetworkAclId: !Ref naclDenyAllAccess
      Protocol: -1
      RuleAction: deny
      RuleNumber: 100

  naclEntryDenyAllIngress:
    Type: AWS::EC2::NetworkAclEntry
    Properties: 
      CidrBlock: 0.0.0.0/0
      Egress: false
      NetworkAclId: !Ref naclDenyAllAccess
      Protocol: -1
      RuleAction: deny
      RuleNumber: 100  

## Create enhanced monitoring role
  roleEnhancedMonitoring:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${gdbPrefix}-monitor-${AWS::Region}
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - sts:AssumeRole
            Principal:
              Service:
                - monitoring.rds.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonRDSEnhancedMonitoringRole

## Create external integration role
  roleServiceIntegration:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${gdbPrefix}-integrate-${AWS::Region}
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - sts:AssumeRole
            Principal:
              Service:
                - rds.amazonaws.com
      Policies:
        - PolicyName: inline-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:ListBucket
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:AbortMultipartUpload
                  - s3:DeleteObject
                  - s3:ListMultipartUploadParts
                  - s3:PutObject
                Resource:
                  - arn:aws:s3:::*/*
                  - arn:aws:s3:::*

## Create role for bastion host
  roleBastionHost:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${gdbPrefix}-bastion-${AWS::Region}
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 'sts:AssumeRole'
            Principal:
              Service:
                - 'ec2.amazonaws.com'
                - 'ssm.amazonaws.com'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM'
      Policies:
        - PolicyName: inline-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - rds:*
                  - s3:*
                  - ssm:*
                  - kms:*
                  - secretsmanager:*
                  - rds-db:connect
                Resource: "*"
  profileBastionHost:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - Ref: roleBastionHost

## Create the Apache Superset host
  supersetHost:
    Type: 'AWS::EC2::Instance'
    Properties:
      SubnetId: !Ref sub2Public
      InstanceType: !FindInMap [ RegionalSettings, !Ref "AWS::Region", biappType ]
      SecurityGroupIds: [ !Ref supersetSecGroup ]
      Tags:
        - Key: Name
          Value: !Sub "${gdbPrefix}-superset-host"
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            DeleteOnTermination: true
            Iops: 7500
            VolumeSize: 150
            VolumeType: io1
      ImageId: !Ref amiIdLatestAmzn2
      IamInstanceProfile: !Ref profileBastionHost
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          cd /tmp

          # update SSM & upgrade packages
          sudo yum install -y https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm
          sudo systemctl start amazon-ssm-agent
          source ~/.bashrc
          sudo yum update -y
          sudo yum install python37 -y
          echo "* updated SSM agent and upgraded packages" >> /debug.log

          # path management
          export PATH=/usr/local/bin:$PATH
          export PYTHONPATH=/usr/local/bin:$PYTHONPATH
          alias python=python37
          alias pip=pip3

          # install superset and mysql client
          sudo yum install gcc gcc-c++ python3-devel cyrus-sasl-devel mysql mysql-devel jq -y
          sudo pip3 install cchardet==1.0.0
          sudo pip3 install superset==0.30.0
          sudo pip3 install mysql
          echo "* installed application packages" >> /debug.log

          # reboot
          echo "* bootstrap complete, rebooting" >> /debug.log
          shutdown -r now

## Create parameter groups for cluster nodes
  pgNodeParams:
    Type: AWS::RDS::DBParameterGroup
    Properties:
      Description: !Sub ${gdbPrefix}-node-params
      Family: aurora-mysql5.7
      Parameters:
        innodb_stats_persistent_sample_pages: "256"
        slow_query_log: "1"
        long_query_time: "10"
        log_output: FILE
      Tags:
        - Key: Name
          Value: !Sub ${gdbPrefix}-node-params

## Create cluster parameter group
  cpgClusterParams:
    Type: AWS::RDS::DBClusterParameterGroup
    Properties:
      Description: !Sub ${gdbPrefix}-cluster-params
      Family: aurora-mysql5.7
      Parameters:
        aws_default_s3_role: !GetAtt roleServiceIntegration.Arn
      Tags:
        - Key: Name
          Value: !Sub ${gdbPrefix}-cluster-params

## Create a random generated password and store it as a secret
  secretClusterMasterUser:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: "Master user credentials for labstack-cluster"
      GenerateSecretString:
        SecretStringTemplate: '{"username": "masteruser"}'
        GenerateStringKey: 'password'
        PasswordLength: 10
        ExcludeCharacters: '"@/\$`&,.<>'
      Tags:
        - Key: Name
          Value: labstack-secret

## Create Aurora cluster
  dbCluster:
    Type: AWS::RDS::DBCluster
    Properties:
      Engine: aurora-mysql
      EngineMode: provisioned
      EngineVersion: 5.7.mysql_aurora.2.07.1
      DBSubnetGroupName: !Ref dbSubnets
      DBClusterParameterGroupName: !Ref cpgClusterParams
      DBClusterIdentifier: !Sub ${gdbPrefix}-cluster
      BackupRetentionPeriod: 7
      MasterUsername: 'masteruser'
      MasterUserPassword: !Ref dbMasterPassword
      DatabaseName: !FindInMap [ ClusterSettings, global, dbSchema ]
      StorageEncrypted: false
      VpcSecurityGroupIds: [ !Ref dbSecGroupCluster ]
      EnableCloudwatchLogsExports: [ error, slowquery ]
      EnableIAMDatabaseAuthentication: true
      AssociatedRoles:
        - RoleArn: !GetAtt roleServiceIntegration.Arn
      Tags:
        - Key: Name
          Value: !Sub ${gdbPrefix}-cluster

## Deploy the first cluster node (always the writer)
  dbNodeWriter:
    Type: AWS::RDS::DBInstance
    Properties:
      DBClusterIdentifier: !Ref dbCluster
      DBInstanceIdentifier: !Sub ${gdbPrefix}-node1
      CopyTagsToSnapshot: true
      DBInstanceClass: !FindInMap [ RegionalSettings, !Ref "AWS::Region", nodeType ]
      DBParameterGroupName: !Ref pgNodeParams
      Engine: aurora-mysql
      MonitoringInterval: 1
      MonitoringRoleArn: !GetAtt roleEnhancedMonitoring.Arn
      PubliclyAccessible: false
      EnablePerformanceInsights: true
      PerformanceInsightsRetentionPeriod: 7
      Tags:
        - Key: Name
          Value: !Sub ${gdbPrefix}-node1


## Create sysbench prep SSM document
  ssmDocSysbenchTest:
    Type: AWS::SSM::Document
    Properties:
      DocumentType: Command
      Tags:
        - Key: Name
          Value: labstack-sysbench-test
      Content:
        schemaVersion: '2.2'
        description: SysBench Percona TPCC-LIKE Preparation
        parameters:
          clusterEndpoint:
            type: String
            description: Aurora Cluster Endpoint
            default: !GetAtt dbCluster.Endpoint.Address
          dbUser:
            type: String
            description: DB User
            default: !Join ['', ['{{resolve:secretsmanager:', !Ref secretClusterMasterUser, ':SecretString:username}}' ]]
          dbPassword:
            type: String
            description: DB Password
            default: !Join ['', ['{{resolve:secretsmanager:', !Ref secretClusterMasterUser, ':SecretString:password}}' ]]
          dbSchema:
            type: String
            description: DB Schema
            default: !FindInMap [ ClusterSettings, sysbench, dbSchema ]
          dbDriver:
            type: String
            description: DB Driver
            default: !FindInMap [ ClusterSettings, global, dbDriver ]
            allowedValues: [ mysql, pgsql ]
          runTime:
            type: String
            description: Test Runtime
            default: !FindInMap [ ClusterSettings, sysbench, runTime ]
          numThreads:
            type: String
            description: Threads
            default: !FindInMap [ ClusterSettings, sysbench, numThreads ]
          numTables:
            type: String
            description: Tables
            default: !FindInMap [ ClusterSettings, sysbench, numTables ]
          numScale:
            type: String
            description: Scale
            default: !FindInMap [ ClusterSettings, sysbench, numWarehouses ]
        mainSteps:
        - action: aws:runShellScript
          name: SysBenchTpccPrepare
          inputs:
            runCommand:
            - 'echo "DROP SCHEMA IF EXISTS {{ dbSchema }}; CREATE SCHEMA {{ dbSchema }};" | mysql -h{{ clusterEndpoint }} -u{{ dbUser }} -p"{{ dbPassword }}" && cd /home/ubuntu/sysbench-tpcc && ./tpcc.lua --mysql-host={{ clusterEndpoint }} --mysql-user={{ dbUser }} --mysql-password="{{ dbPassword }}" --mysql-db={{ dbSchema }} --threads={{ numThreads }} --tables={{ numTables }} --scale={{ numScale }} --time={{ runTime }} --db-driver={{ dbDriver }} prepare'
        - action: aws:runShellScript
          name: SysBenchTpccRun
          inputs:
            runCommand:
            - 'cd /home/ubuntu/sysbench-tpcc && ./tpcc.lua --mysql-host={{ clusterEndpoint }} --mysql-user={{ dbUser }} --mysql-password="{{ dbPassword }}" --mysql-db={{ dbSchema }} --threads={{ numThreads }} --tables={{ numTables }} --scale={{ numScale }} --time={{ runTime }} --db-driver={{ dbDriver }} run'


## Outputs
Outputs:
  vpcId:
    Description: Region1 Aurora Lab VPC
    Value: !Ref vpc
  supersetInstanceID:
    Description: Region1 Apache Superset Instance ID
    Value: !Ref supersetHost
  supersetPublicDNSName:
    Description: Region1 Apache Superset Public DNS Name
    Value: !GetAtt supersetHost.PublicDnsName
  clusterName:
    Description: Region1 Aurora Regional Cluster Name
    Value: !Ref dbCluster
  clusterEndpoint:
    Description: Region1 Aurora Regional Cluster Writer Endpoint
    Value: !GetAtt dbCluster.Endpoint.Address
  clusterMasterPassword:
    Description: Aurora Master Password
    Value: !Ref dbMasterPassword
  loadTestRunDoc:
    Description: Region1 Load Test Execution Command Document
    Value: !Ref ssmDocSysbenchTest
  dbSubnetGroup:
    Description: Region1 Database Subnet Group
    Value: !Ref dbSubnets
  dbSecurityGroup:
    Description: Region1 Database Security Group
    Value: !Ref dbSecGroupCluster
  secretArn:
    Description: Region1 Database Credentials Secret ARN
    Value: !Ref secretClusterMasterUser
