---
## Amazon Aurora Labs for MySQL
## Infrastructure template with an Aurora cluster for lab exercises
##
## Dependencies:
## none
##
## License:
## This sample code is made available under the MIT-0 license. See the LICENSE file.

AWSTemplateFormatVersion: 2010-09-09
Description: Amazon Aurora Labs for MySQL


## Parameters
Parameters:
  deployCluster:
    Default: "Yes"
    Type: String
    AllowedValues:
      - "Yes"
      - "No"
    Description: Choose 'Yes' if you prefer to have the DB cluster created automatically (instead of creating it manually yourself).
  deployML:
    Default: "No"
    Type: String
    AllowedValues:
      - "Yes"
      - "No"
    Description: If you plan to run the Aurora ML labs, choose 'Yes', to deploy the required resources.
  deployGDB:
    Default: "No"
    Type: String
    AllowedValues:
      - "Yes"
      - "No"
    Description: If you plan to run the Aurora Global Database labs, choose 'Yes', to deploy the required resources.
  deployBacktrack:
    Default: "Yes"
    Type: String
    AllowedValues:
      - "Yes"
      - "No"
    Description: If you plan to run the Backtrack lab, choose 'Yes', to deploy a cluster with Backtrack enabled.
  agreeTracking:
    Default: "Yes"
    Type: String
    AllowedValues:
      - "Yes"
      - "No"
    Description: Help us improve our labs by agreeing to the collection of anonymous usage statistics for our labs.
  isSecondary:
    Default: "No"
    Type: String
    AllowedValues:
      - "Yes"
      - "No"
    Description: Please leave default value, reserved for internal use.
  EEEventId:
    Type: String
    Description: Please leave blank, reserved for internal use.
  EETeamId:
    Type: String
    Description: Please leave blank, reserved for internal use.
  EEModuleId:
    Type: String
    Description: Please leave blank, reserved for internal use.
  EEModuleVersion:
    Type: String
    Description: Please leave blank, reserved for internal use.
  LatestAmiId:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-ebs'
    Description: Please leave as-is, reserved for internal use.


## Metadata
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "Lab Features"
        Parameters:
          - deployCluster
          - deployGDB
          - deployML
          - deployBacktrack
      - Label:
          default: "Help Us Improve Our Labs!"
        Parameters:
          - agreeTracking
      - Label:
          default: "Reserved for Internal Use (Do Not Change)"
        Parameters:
          - isSecondary
          - EEEventId
          - EETeamId
          - EEModuleId
          - EEModuleVersion
          - LatestAmiId
    ParameterLabels:
      deployCluster:
        default: "Create DB Cluster Automatically?"
      deployGDB:
        default: "Enable Aurora Global Database Labs?"
      deployML:
        default: "Enable Aurora ML Labs?"
      deployBacktrack:
        default: "Enable Backtrack?"
      agreeTracking:
        default: "Collect Usage Data?"
      isSecondary:
        default: "Secondary Region Only"
      EEEventId:
        default: "EventEngine Event"
      EETeamId:
        default: "EventEngine Team"
      EEModuleId:
        default: "EventEngine Module"
      EEModuleVersion:
        default: "EventEngine Version"
      LatestAmiId:
        default: "Reference Linux AMI"


## Conditions
Conditions:
  # are we running in EE? - used to hardcode resource name prefixes when deployed in EE among other things, use the stack name otherwise
  condEventEngine: !Not [ !Equals [ !Ref EEEventId, "" ] ]
  # EE doesn't allow us to customize parameters, so different EE modules launch different features
  # the cluster is deployed only if parameter is yes, and the EE module doesn't match the 'base-only' module id
  condDeployDBCluster: !And [ !Equals [ !Ref deployCluster, "Yes" ], !Not [ !Equals [ !Ref EEModuleId, "6ccc4506e8f04b81bc138bae806abe67" ] ] ]
  # the ML resources are only deployed if parameter is yes, or EE module matches the 'all-features' module id
  condDeployMLResources: !Or [ !Equals [ !Ref deployML, "Yes" ], !Equals [ !Ref EEModuleId, "fbae3faaf87d4062b5dc7986cf93cc84" ] ]
  # the GDB resources are only deployed if parameter is yes, or EE module matches the 'global-cluster' or 'all-features' module id
  condDeployGDBResources: !Or [ !Equals [ !Ref deployGDB, "Yes" ], !Equals [ !Ref EEModuleId, "df00a2bc0f5a498b88157da8ec40c0be" ], !Equals [ !Ref EEModuleId, "fbae3faaf87d4062b5dc7986cf93cc84" ] ]
  # the bug fix for secondary region KMS is only deployed if parameter is yes
  condIsSecondary: !Equals [ !Ref isSecondary, "Yes" ]
  # GDB and Backtrack are currently incompatible, don't enable backtrack if deployBacktrack = No, or EE module matches the 'global-cluster' or 'all-features' module id
  condEnableBacktrack: !And [ !Equals [ !Ref deployBacktrack, "Yes" ], !Not [ !Or [ !Equals [ !Ref EEModuleId, "df00a2bc0f5a498b88157da8ec40c0be" ], !Equals [ !Ref EEModuleId, "fbae3faaf87d4062b5dc7986cf93cc84" ] ] ] ]
  # Condition to skip creating multi region KMS key in the secondary region
  condIsNotSecondary: !Not [Condition: condIsSecondary]


## Mappings
Mappings:
  RegionalSettings:
    us-east-1:
      ideType: m5.large
      supersetType: m5.large
      nodeType: db.r6g.large
      name: N. Virginia
      az1: us-east-1a
      az2: us-east-1b
      az3: us-east-1c
    us-east-2:
      ideType: m5.large
      supersetType: m5.large
      nodeType: db.r6g.large
      name: Ohio
      az1: us-east-2c
      az2: us-east-2a
      az3: us-east-2b
    us-west-2:
      ideType: m5.large
      supersetType: m5.large
      nodeType: db.r6g.large
      name: Oregon
      az1: us-west-2b
      az2: us-west-2c
      az3: us-west-2d
    ca-central-1:
      ideType: m5.large
      supersetType: m5.large
      nodeType: db.r6g.large
      name: Montreal
      az1: ca-central-1c
      az2: ca-central-1a
      az3: ca-central-1b
    eu-central-1:
      ideType: m5.large
      supersetType: m5.large
      nodeType: db.r6g.large
      name: Frankfurt
      az1: eu-central-1b
      az2: eu-central-1a
      az3: eu-central-1c
    eu-west-1:
      ideType: m5.large
      supersetType: m5.large
      nodeType: db.r6g.large
      name: Ireland
      az1: eu-west-1a
      az2: eu-west-1b
      az3: eu-west-1c
    eu-west-2:
      ideType: m5.large
      supersetType: m5.large
      nodeType: db.r6g.large
      name: London
      az1: eu-west-2b
      az2: eu-west-2a
      az3: eu-west-2c
    ap-southeast-1:
      ideType: m5.large
      supersetType: m5.large
      nodeType: db.r6g.large
      name: Singapore
      az1: ap-southeast-1c
      az2: ap-southeast-1b
      az3: ap-southeast-1a
    ap-southeast-2:
      ideType: m5.large
      supersetType: m5.large
      nodeType: db.r6g.large
      name: Sydney
      az1: ap-southeast-2a
      az2: ap-southeast-2b
      az3: ap-southeast-2c
    ap-south-1:
      ideType: m5.large
      supersetType: m5.large
      nodeType: db.r6g.large
      name: Mumbai
      az1: ap-south-1a
      az2: ap-south-1b
      az3: ap-south-1c
    ap-northeast-1:
      ideType: m5.large
      supersetType: m5.large
      nodeType: db.r6g.large
      name: Tokyo
      az1: ap-northeast-1d
      az2: ap-northeast-1a
      az3: ap-northeast-1c
    ap-northeast-2:
      ideType: m5.large
      supersetType: m5.large
      nodeType: db.r6g.large
      name: Seoul
      az1: ap-northeast-2a
      az2: ap-northeast-2b
      az3: ap-northeast-2c
  NetworkSettings:
    primary:
      vpcCidr: 172.30.0.0/16
      subPub1Cidr: 172.30.0.0/24
      subPub2Cidr: 172.30.1.0/24
      subPub3Cidr: 172.30.2.0/24
      subPrv1Cidr: 172.30.10.0/24
      subPrv2Cidr: 172.30.11.0/24
      subPrv3Cidr: 172.30.12.0/24
    secondary:
      vpcCidr: 172.31.0.0/16
      subPub1Cidr: 172.31.0.0/24
      subPub2Cidr: 172.31.1.0/24
      subPub3Cidr: 172.31.2.0/24
      subPrv1Cidr: 172.31.10.0/24
      subPrv2Cidr: 172.31.11.0/24
      subPrv3Cidr: 172.31.12.0/24
  ClusterSettings:
    global:
      dbSchema: mylab
      dbDriver: mysql
      dbVersion: 5.7.mysql_aurora.2.10.0
      dbEngine: aurora-mysql
      dbFamily: aurora-mysql5.7
    scaling:
      maxCapacity: 2
      minCapacity: 1
      cpuLoadTarget: 30
    sysbench:
      dbSchema: sbtpcc
      runTime: '600'
      numThreads: '4'
      numTables: '8'
      numWarehouses: '2'
  MLSettings:
    global:
      notebookType: ml.m4.xlarge
  GDBSettings:
    superset:
      username: "admin"
      password: "AuroraTest123!"


## Resources
Resources:

## The VPC
  vpc:
    Type: "AWS::EC2::VPC"
    Properties:
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      CidrBlock: !If [ condIsSecondary, !FindInMap [ NetworkSettings, secondary, vpcCidr ], !FindInMap [ NetworkSettings, primary, vpcCidr ] ]
      Tags:
        - Key: Name
          Value: !If [ condEventEngine, "auroralab-vpc", !Sub "${AWS::StackName}-vpc" ]

## Create an IGW & attach it to the VPC
  vpcIgw:
    Type: "AWS::EC2::InternetGateway"
    Properties:
      Tags:
        - Key: Name
          Value: !If [ condEventEngine, "auroralab-igw", !Sub "${AWS::StackName}-igw" ]
  attachIgwVpc:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      VpcId: !Ref vpc
      InternetGatewayId: !Ref vpcIgw

## Create a public subnet in each AZ
  sub1Public:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref vpc
      CidrBlock: !If [ condIsSecondary, !FindInMap [ NetworkSettings, secondary, subPub1Cidr ], !FindInMap [ NetworkSettings, primary, subPub1Cidr ] ]
      AvailabilityZone: !FindInMap [ RegionalSettings, !Ref "AWS::Region", az1 ]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !If [ condEventEngine, "auroralab-pub-sub-1", !Sub "${AWS::StackName}-pub-sub-1" ]
  sub2Public:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref vpc
      CidrBlock: !If [ condIsSecondary, !FindInMap [ NetworkSettings, secondary, subPub2Cidr ], !FindInMap [ NetworkSettings, primary, subPub2Cidr ] ]
      AvailabilityZone: !FindInMap [ RegionalSettings, !Ref "AWS::Region", az2 ]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !If [ condEventEngine, "auroralab-pub-sub-2", !Sub "${AWS::StackName}-pub-sub-2" ]
  sub3Public:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref vpc
      CidrBlock: !If [ condIsSecondary, !FindInMap [ NetworkSettings, secondary, subPub3Cidr ], !FindInMap [ NetworkSettings, primary, subPub3Cidr ] ]
      AvailabilityZone: !FindInMap [ RegionalSettings, !Ref "AWS::Region", az3 ]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !If [ condEventEngine, "auroralab-pub-sub-3", !Sub "${AWS::StackName}-pub-sub-3" ]

## Associate the public subnets with a public route table
  rtbPublic:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref vpc
      Tags:
        - Key: Name
          Value: !If [ condEventEngine, "auroralab-public-rtb", !Sub "${AWS::StackName}-public-rtb" ]
  rteToIgw:
    Type: "AWS::EC2::Route"
    DependsOn: attachIgwVpc
    Properties:
      RouteTableId: !Ref rtbPublic
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref vpcIgw
  srta1Public:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId: !Ref sub1Public
      RouteTableId: !Ref rtbPublic
  srta2Public:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId: !Ref sub2Public
      RouteTableId: !Ref rtbPublic
  srta3Public:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId: !Ref sub3Public
      RouteTableId: !Ref rtbPublic

## Create a private subnet in each AZ
  sub1Private:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref vpc
      CidrBlock: !If [ condIsSecondary, !FindInMap [ NetworkSettings, secondary, subPrv1Cidr ], !FindInMap [ NetworkSettings, primary, subPrv1Cidr ] ]
      AvailabilityZone: !FindInMap [ RegionalSettings, !Ref "AWS::Region", az1 ]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !If [ condEventEngine, "auroralab-prv-sub-1", !Sub "${AWS::StackName}-prv-sub-1" ]
  sub2Private:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref vpc
      CidrBlock: !If [ condIsSecondary, !FindInMap [ NetworkSettings, secondary, subPrv2Cidr ], !FindInMap [ NetworkSettings, primary, subPrv2Cidr ] ]
      AvailabilityZone: !FindInMap [ RegionalSettings, !Ref "AWS::Region", az2 ]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !If [ condEventEngine, "auroralab-prv-sub-2", !Sub "${AWS::StackName}-prv-sub-2" ]
  sub3Private:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref vpc
      CidrBlock: !If [ condIsSecondary, !FindInMap [ NetworkSettings, secondary, subPrv3Cidr ], !FindInMap [ NetworkSettings, primary, subPrv3Cidr ] ]
      AvailabilityZone: !FindInMap [ RegionalSettings, !Ref "AWS::Region", az3 ]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !If [ condEventEngine, "auroralab-prv-sub-3", !Sub "${AWS::StackName}-prv-sub-3" ]

## Create a NAT Gateway & EIP
  natEip:
    Type: "AWS::EC2::EIP"
    Properties:
      Domain: vpc
  vpcNgw:
    Type: "AWS::EC2::NatGateway"
    DependsOn: attachIgwVpc
    Properties:
      AllocationId: !GetAtt natEip.AllocationId
      SubnetId: !Ref sub2Public

## Associate the private subnets with a NATed route table
  rtbNat:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref vpc
      Tags:
        - Key: Name
          Value: !If [ condEventEngine, "auroralab-nat-rtb", !Sub "${AWS::StackName}-nat-rtb" ]
  rteToNgw:
    Type: "AWS::EC2::Route"
    Properties:
      RouteTableId: !Ref rtbNat
      DestinationCidrBlock: "0.0.0.0/0"
      NatGatewayId: !Ref vpcNgw
  srta1Ngw:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref sub1Private
      RouteTableId: !Ref rtbNat
  srta2Ngw:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref sub2Private
      RouteTableId: !Ref rtbNat
  srta3Ngw:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref sub3Private
      RouteTableId: !Ref rtbNat

## Create VPC S3 endpoint
  s3Enpoint:
    Type: "AWS::EC2::VPCEndpoint"
    Properties:
      VpcId: !Ref vpc
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.s3"
      RouteTableIds:
        - !Ref rtbPublic
        - !Ref rtbNat
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Principal: "*"
            Effect: Allow
            Action: "s3:*"
            Resource:
              - "arn:aws:s3:::*"
              - "arn:aws:s3:::*/*"

## Create S3 bucket that will host lab resources (incl ML training data), if the ML lab condition allows it.
  bucketLabData:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName: !Join
        - "-"
        - - !If [ condEventEngine, "auroralab", !Ref "AWS::StackName" ]
          - data
          - !Select
            - 0
            - !Split
              - "-"
              - !Select
                - 2
                - !Split
                  - "/"
                  - !Ref 'AWS::StackId'
      PublicAccessBlockConfiguration:
        BlockPublicAcls: TRUE
        BlockPublicPolicy: TRUE
        IgnorePublicAcls: TRUE
        RestrictPublicBuckets: TRUE
      Tags:
        - Key: Name
          Value: !Join
            - "-"
            - - !If [ condEventEngine, "auroralab", !Ref "AWS::StackName" ]
              - data
              - !Select
                - 0
                - !Split
                  - "-"
                  - !Select
                    - 2
                    - !Split
                      - "/"
                      - !Ref 'AWS::StackId'

## Create DB subnet group
  dbSubnets:
    Type: "AWS::RDS::DBSubnetGroup"
    Properties:
      DBSubnetGroupName: !If [ condEventEngine, "auroralab-db-subnet-group", !Sub "${AWS::StackName}-db-subnet-group" ]
      DBSubnetGroupDescription: "Aurora Lab subnets allowed for deploying DB instances"
      SubnetIds: [ !Ref sub1Private, !Ref sub2Private, !Ref sub3Private ]
      Tags:
        - Key: Name
          Value: !If [ condEventEngine, "auroralab-db-subnet-group", !Sub "${AWS::StackName}-db-subnet-group" ]

## Create client security group
  clientSecGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      VpcId: !Ref vpc
      GroupName: !If [ condEventEngine, "auroralab-workstation-sg", !Sub "${AWS::StackName}-workstation-sg" ]
      GroupDescription: "Aurora lab workstation security group (firewall)"
      Tags:
        - Key: Name
          Value: !If [ condEventEngine, "auroralab-workstation-sg", !Sub "${AWS::StackName}-workstation-sg" ]

## Create Apache Superset security group
  supersetSecGroup:
    Type: "AWS::EC2::SecurityGroup"
    Condition: condDeployGDBResources
    Properties:
      VpcId: !Ref vpc
      GroupName: !If [ condEventEngine, "auroralab-superset-sg", !Sub "${AWS::StackName}-superset-sg" ]
      GroupDescription: "Aurora Lab Apache Superset security group (firewall)"
      Tags:
        - Key: Name
          Value: !If [ condEventEngine, "auroralab-superset-sg", !Sub "${AWS::StackName}-superset-sg" ]
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
          Description: Allows Default Webport (80) access      

## Create DB security group
  dbClusterSecGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      VpcId: !Ref vpc
      GroupName: !If [ condEventEngine, "auroralab-database-sg", !Sub "${AWS::StackName}-database-sg" ]
      GroupDescription: "Aurora lab database security group (firewall)"
      Tags:
        - Key: Name
          Value: !If [ condEventEngine, "auroralab-database-sg", !Sub "${AWS::StackName}-database-sg" ]
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !Ref clientSecGroup
          Description: "Allows MySQL access from the workstation security group"
  ruleDbClusterSecGroupIngressSelf:
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
      GroupId: !Ref dbClusterSecGroup
      IpProtocol: -1
      Description: "Allows all inbound access from sources with the same security group"
      SourceSecurityGroupId: !Ref dbClusterSecGroup
  ruledbClusterSecGroupIngressSuperset:
    Type: "AWS::EC2::SecurityGroupIngress"
    Condition: condDeployGDBResources
    Properties:
      GroupId: !Ref dbClusterSecGroup
      IpProtocol: tcp
      FromPort: 3306
      ToPort: 3306
      Description: "Allows MySQL access from Superset Instance"
      SourceSecurityGroupId: !Ref supersetSecGroup

## Create NACL to simulate regional failure
  naclDenyAllAccess:
    Type: "AWS::EC2::NetworkAcl"
    Condition: condDeployGDBResources
    Properties: 
      VpcId: !Ref vpc
      Tags: 
        - Key: Name
          Value: !If [ condEventEngine, "auroralab-denyall-nacl", !Sub "${AWS::StackName}-denyall-nacl" ]
  naclEntryDenyAllEgress:
    Type: "AWS::EC2::NetworkAclEntry"
    Condition: condDeployGDBResources
    Properties: 
      CidrBlock: 0.0.0.0/0
      Egress: true
      NetworkAclId: !Ref naclDenyAllAccess
      Protocol: -1
      RuleAction: deny
      RuleNumber: 100
  naclEntryDenyAllIngress:
    Type: "AWS::EC2::NetworkAclEntry"
    Condition: condDeployGDBResources
    Properties: 
      CidrBlock: 0.0.0.0/0
      Egress: false
      NetworkAclId: !Ref naclDenyAllAccess
      Protocol: -1
      RuleAction: deny
      RuleNumber: 100 

## Create a random generated password and store it as a secret for the DB cluster
  secretClusterAdminUser:
    Type: "AWS::SecretsManager::Secret"
    Condition: condDeployDBCluster
    Properties:
      Description: !If [ condEventEngine, "Administrator user credentials for DB cluster 'auroralab-mysql-cluster'", !Sub "Administrator user credentials for DB cluster '${AWS::StackName}-mysql-cluster'" ]
      GenerateSecretString:
        SecretStringTemplate: '{"username": "administrator"}'
        GenerateStringKey: 'password'
        PasswordLength: 10
        ExcludeCharacters: '="@/\$`&:{}()[]'
      Tags:
        - Key: Name
          Value: !If [ condEventEngine, "auroralab-cluster-secret", !Sub "${AWS::StackName}-cluster-secret" ]

## Create enhanced monitoring role
  roleEnhancedMonitoring:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: !If [ condEventEngine, !Sub "auroralab-monitor-${AWS::Region}", !Sub "${AWS::StackName}-monitor-${AWS::Region}" ]
      Description: "Allows your Aurora DB cluster to deliver Enhanced Monitoring metrics."
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - "sts:AssumeRole"
            Principal:
              Service:
                - "monitoring.rds.amazonaws.com"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AmazonRDSEnhancedMonitoringRole"
      Tags:
        - Key: Name
          Value: !If [ condEventEngine, !Sub "auroralab-monitor-${AWS::Region}", !Sub "${AWS::StackName}-monitor-${AWS::Region}" ]

## Create external integration role
  roleServiceIntegration:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: !If [ condEventEngine, !Sub "auroralab-integrate-${AWS::Region}", !Sub "${AWS::StackName}-integrate-${AWS::Region}" ]
      Description: "Allows your Aurora DB cluster to integrate with other AWS services, such as Amazon S3 for import/export."
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - "sts:AssumeRole"
            Principal:
              Service:
                - "rds.amazonaws.com"
      Policies:
        - PolicyName: inline-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "s3:ListBucket"
                  - "s3:GetObject"
                  - "s3:GetObjectVersion"
                  - "s3:AbortMultipartUpload"
                  - "s3:DeleteObject"
                  - "s3:ListMultipartUploadParts"
                  - "s3:PutObject"
                Resource:
                  - "arn:aws:s3:::*/*"
                  - "arn:aws:s3:::*"
      Tags:
        - Key: Name
          Value: !If [ condEventEngine, !Sub "auroralab-integrate-${AWS::Region}", !Sub "${AWS::StackName}-integrate-${AWS::Region}" ]

## Create role for client IDE
  roleClientIDE:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: !If [ condEventEngine, !Sub "auroralab-ide-${AWS::Region}", !Sub "${AWS::StackName}-ide-${AWS::Region}" ]
      Description: "Permits user interaction with AWS APIs from the Cloud9 IDE."
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - "sts:AssumeRole"
            Principal:
              Service:
                - "ec2.amazonaws.com"
                - "ssm.amazonaws.com"
                - "cloud9.amazonaws.com"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore"
        - "arn:aws:iam::aws:policy/AmazonSageMakerFullAccess"
        - "arn:aws:iam::aws:policy/AWSGlueConsoleSageMakerNotebookFullAccess"
        - "arn:aws:iam::aws:policy/AWSCloud9SSMInstanceProfile"
        - "arn:aws:iam::aws:policy/AmazonEC2ReadOnlyAccess"
      Policies:
        - PolicyName: inline-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "rds:*"
                  - "s3:*"
                  - "ssm:*"
                  - "kinesis:*"
                  - "kms:*"
                  - "sns:*"
                  - "secretsmanager:*"
                  - "rds-db:connect"
                  - "ec2:CreateVpcPeeringConnection"
                  - "ec2:DescribeVpcPeeringConnections"
                  - "ec2:AcceptVpcPeeringConnection"
                  - "ec2:DescribeRegions"
                  - "iam:AttachRolePolicy"
                  - "iam:DetachRolePolicy"
                  - "iam:PutRolePolicy"
                  - "iam:DeleteRolePolicy"
                  - "iam:GetRolePolicy"
                  - "iam:CreatePolicy"
                  - "iam:DeletePolicy"
                  - "iam:CreateRole"
                  - "iam:DeleteRole"
                  - "iam:ListPolicies"
                  - "iam:ListRoles"
                  - "iam:PassRole"
                Resource: "*"
      Tags:
        - Key: Name
          Value: !If [ condEventEngine, !Sub "auroralab-ide-${AWS::Region}", !Sub "${AWS::StackName}-ide-${AWS::Region}" ]
  profileClientIDE:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      InstanceProfileName: !If [ condEventEngine, !Sub "auroralab-ide-${AWS::Region}", !Sub "${AWS::StackName}-ide-${AWS::Region}" ]
      Path: /
      Roles:
        - Ref: roleClientIDE

## Create a Cloud9 IDE host
  c9ClientIDE:
    Type: AWS::Cloud9::EnvironmentEC2
    DependsOn: [ resLabAccount ]
    Properties: 
      AutomaticStopTimeMinutes: 120
      ConnectionType: CONNECT_SSM
      Description: "Cloud9 IDE to interact with the Aurora DB resources"
      InstanceType: !FindInMap [ RegionalSettings, !Ref "AWS::Region", ideType ]
      ImageId: resolve:ssm:/aws/service/cloud9/amis/amazonlinux-2-x86_64
      Name: !If [ condEventEngine, "auroralab-client-ide", !Sub "${AWS::StackName}-client-ide" ]
      SubnetId: !Ref sub1Private
      OwnerArn: !If [ condEventEngine, !Sub "arn:aws:iam::${AWS::AccountId}:assumed-role/TeamRole/MasterKey", Ref: AWS::NoValue ]
      Tags:
        - Key: BootstrapGroup
          Value: !Sub "bootstrap-${AWS::StackName}"

## Create a Cloud9 host SSM bootstrap document
  ssmDocClientBootstrap: 
    Type: AWS::SSM::Document
    DependsOn: [ bootstrapWaitHandle ]
    Properties:
      DocumentType: Command
      Name: !If [ condEventEngine, "auroralab-bootstrap-client", !Sub "${AWS::StackName}-bootstrap-client" ]
      Tags:
        - Key: Name
          Value: !If [ condEventEngine, "auroralab-bootstrap-client", !Sub "${AWS::StackName}-bootstrap-client" ]
      Content:
        schemaVersion: '2.2'
        description: "Bootstrap Cloud9 Client IDE Instance"
        mainSteps:
        - action: aws:runShellScript
          name: BootstrapTools
          inputs:
            runCommand:
            - "#!/bin/bash -xe"
            - "echo \"$(date \"+%F %T\") * running as $(whoami)\" >> /bootstrap.log"
            - "yum install -y unzip jq"
            - "sudo pip3 uninstall awscli -y"
            - "sudo rm -r /usr/bin/aws -f"
            - "echo \"$(date \"+%F %T\") * installed supporting packages\" >> /bootstrap.log"
            - "mkdir /home/ec2-user/awscl"
            - "curl \"https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip\" -o \"/home/ec2-user/awscl/awscliv2.zip\""
            - "unzip \"/home/ec2-user/awscl/awscliv2.zip\" -d \"/home/ec2-user/awscl\""
            - "sudo chown ec2-user:ec2-user /home/ec2-user/awscl/aws -R"
            - "sudo /home/ec2-user/awscl/aws/install -i /usr/local/aws-cli -b /usr/local/bin"
            - "echo \"$(date \"+%F %T\") * installed awscli (v2)\" >> /bootstrap.log"
            - "yum remove -y mariadb"
            - "yum install -y https://repo.percona.com/yum/percona-release-latest.noarch.rpm"
            - "percona-release disable all"
            - "percona-release setup pt"
            - "percona-release setup ps80"
            - "yum install -y percona-toolkit percona-server-client"
            - "mysql --version >> /bootstrap.log"
            - "echo \"$(date \"+%F %T\") * installed Percona tools and client libraries\" >> /bootstrap.log"
            - "curl -s https://packagecloud.io/install/repositories/akopytov/sysbench/script.rpm.sh | sudo bash"
            - "yum -y install sysbench"
            - "sysbench --version >> /bootstrap.log"
            - "echo \"$(date \"+%F %T\") * installed Sysbench\" >> /bootstrap.log"
            - "git clone https://github.com/Percona-Lab/sysbench-tpcc.git /home/ec2-user/environment/sysbench-tpcc"
            - "echo \"$(date \"+%F %T\") * cloned percona/sysbench-tpcc repo\" >> /bootstrap.log"
            - "git clone https://github.com/datacharmer/test_db.git /home/ec2-user/environment/samples"
            - "echo \"$(date \"+%F %T\") * cloned sample data repo\" >> /bootstrap.log"
            - "cd /home/ec2-user/environment"
            - "curl -O https://[[website]]/support/client-requirements.txt"
            - "pip3 install -r client-requirements.txt"
            - "curl -O https://[[website]]/scripts/reader_loadtest.py"
            - "curl -O https://[[website]]/scripts/simple_failover.py"
            - "curl -O https://[[website]]/scripts/aware_failover.py"
            - "curl -O https://[[website]]/scripts/das_reader.py"
            - "curl -O https://[[website]]/scripts/bank_deposit.py"
            - "curl -O https://[[website]]/scripts/weather_perf.py"
            - "curl -O https://[[website]]/scripts/replicatekey.py"
            - "curl -O https://[[website]]/support/sagemaker_policy.json"
            - "curl -O https://[[website]]/support/peer_vpcs.py"
            - "echo \"$(date \"+%F %T\") * downloaded lab assets\" >> /bootstrap.log"
            - "mkdir -p /home/ec2-user/.aws"
            - "touch /home/ec2-user/.aws/config"
            - "echo \"[default]\" >> /home/ec2-user/.aws/config"
            - !Sub "echo \"region = ${AWS::Region}\" >> /home/ec2-user/.aws/config"
            - "chown -R ec2-user:ec2-user /home/ec2-user/.aws"
            - "aws --version >> /bootstrap.log"
            - "echo \"$(date \"+%F %T\") * configured aws cli\" >> /bootstrap.log"
            - 'export ANALYTICSURI="https://[[apigw]]/v1/track" && echo "export ANALYTICSURI=\"$ANALYTICSURI\"" >> /home/ec2-user/.bashrc'
            - !Sub 'export AGREETRACKING="${agreeTracking}" && echo "export AGREETRACKING=\"$AGREETRACKING\"" >> /home/ec2-user/.bashrc'
            - !Sub 'export STACKREGION="${AWS::Region}" && echo "export STACKREGION=\"$STACKREGION\"" >> /home/ec2-user/.bashrc'
            - !Sub 'export STACKNAME="${AWS::StackName}" && echo "export STACKNAME=\"$STACKNAME\"" >> /home/ec2-user/.bashrc'
            - Fn::Join:
              - ""
              - - 'export STACKUUID="'
                - !Select
                  - 2
                  - !Split
                    - "/"
                    - !Ref 'AWS::StackId'
                - '" && echo "export STACKUUID=\"$STACKUUID\"" >> /home/ec2-user/.bashrc'
            - !Sub 'export DATABUCKET="${bucketLabData}" && echo "export DATABUCKET=\"$DATABUCKET\"" >> /home/ec2-user/.bashrc'
            - !Sub 'export DBCLUSTERPG="${cpgClusterParams}" && echo "export DBCLUSTERPG=\"$DBCLUSTERPG\"" >> /home/ec2-user/.bashrc'
            - "echo \"$(date \"+%F %T\") * environment vars initialized\" >> /bootstrap.log"
            - Fn::If:
              - condDeployDBCluster
              - !Sub "export SECRETSTRING=`aws secretsmanager get-secret-value --secret-id \"${secretClusterAdminUser}\" --region ${AWS::Region} | jq -r '.SecretString'` && export DBPASS=`echo $SECRETSTRING | jq -r '.password'` && export DBUSER=`echo $SECRETSTRING | jq -r '.username'`"
              - ""
            - Fn::If:
              - condDeployDBCluster
              - 'echo "export DBPASS=\"$DBPASS\"" >> /home/ec2-user/.bashrc && echo "export DBUSER=$DBUSER" >> /home/ec2-user/.bashrc'
              - ""
            - Fn::If:
              - condDeployDBCluster
              - "echo \"$(date \"+%F %T\") * db credentials initialized\" >> /bootstrap.log"
              - "echo \"$(date \"+%F %T\") * skipped db credentials, no cluster\" >> /bootstrap.log"
            - "chown -R ec2-user:ec2-user /home/ec2-user/environment/*"
            - "echo \"$(date \"+%F %T\") * updated file ownership\" >> /bootstrap.log"
            - !Sub "curl -X PUT -H 'Content-Type:' --data-binary '{\"Status\": \"SUCCESS\", \"Reason\": \"Bootstrap complete\", \"UniqueId\": \"${AWS::StackId}\", \"Data\": \"Bootstrap complete\"}' \"${bootstrapWaitHandle}\""
            - "echo \"$(date \"+%F %T\") * signal bootstrap complete\" >> /bootstrap.log"
            - "shutdown -r now"

## Create the Apache Superset host
  supersetHost:
    Type: "AWS::EC2::Instance"
    Condition: condDeployGDBResources
    Properties:
      SubnetId: !Ref sub2Public
      InstanceType: !FindInMap [ RegionalSettings, !Ref "AWS::Region", supersetType ]
      SecurityGroupIds: [ !Ref supersetSecGroup ]
      Tags:
        - Key: Name
          Value: !If [ condEventEngine, "auroralab-superset-host", !Sub "${AWS::StackName}-superset-host" ]
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            DeleteOnTermination: true
            VolumeSize: 80
            VolumeType: gp2
      ImageId: !Ref LatestAmiId
      IamInstanceProfile: !Ref profileClientIDE
      UserData:
        Fn::Base64:
          Fn::Join:
            - "\n"
            - - !Sub |
                #!/bin/bash
                cd /tmp

                # start bootstrap
                echo "$(date "+%F %T") * running as $(whoami)" >> /debug.log

                # install Docker and necessary packages
                echo "$(date "+%F %T") Updating packages and install Docker" >> /debug.log           
                yum update -y
                amazon-linux-extras install docker
                service docker start >> /debug.log
                usermod -a -G docker ec2-user
                usermod -a -G docker ssm-user
                echo "$(date "+%F %T") * installed docker" >> /debug.log

                # export credentials
              - Fn::Join:
                  - ""
                  - - 'export ADMINUSER="'
                    - !FindInMap [ GDBSettings, superset, username ]
                    - '"'
              - Fn::Join:
                  - ""
                  - - 'export ADMINPASS="'
                    - !FindInMap [ GDBSettings, superset, password ]
                    - '"'
              - !Sub |
                # use docker to handle Apache Superset
                docker run -d -p 80:8088 --name superset apache/superset >> /debug.log
                docker exec -i superset superset fab create-admin \
                  --username "$ADMINUSER" \
                  --firstname Superset \
                  --lastname Admin \
                  --email admin@superset.com \
                  --password "$ADMINPASS" >> /debug.log
                docker exec -i superset superset db upgrade >> /debug.log
                docker exec -i superset superset load_examples >> /debug.log
                docker exec -i superset superset init >> /debug.log
                echo "$(date "+%F %T") superset deployed" >> /debug.log


## Create cluster parameter group
  cpgClusterParams:
    Type: "AWS::RDS::DBClusterParameterGroup"
    Properties:
      Description: !If [ condEventEngine, "auroralab-mysql-cluster-params", !Sub "${AWS::StackName}-mysql-cluster-params" ]
      Family: !FindInMap [ ClusterSettings, global, dbFamily ]
      Parameters:
        aws_default_s3_role: !GetAtt roleServiceIntegration.Arn
        innodb_stats_persistent_sample_pages: "256"
        slow_query_log: "1"
        long_query_time: "1"
        log_output: FILE
      Tags:
        - Key: Name
          Value: !If [ condEventEngine, "auroralab-mysql-cluster-params", !Sub "${AWS::StackName}-mysql-cluster-params" ]

## Create Primary region KMS key used for database cluster volume encryption

  dbclusterkey:
    Type: AWS::KMS::Key
    Condition: condIsNotSecondary
    Properties: 
      Description: "Multi region key (primary) for Global DB labs."
      Enabled: true
      MultiRegion: true
      KeyPolicy:
        Version: '2012-10-17'
        Statement:
        - Sid: Enable IAM User Permissions
          Effect: Allow
          Principal:
            AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root"
          Action: kms:*
          Resource: "*"
        - Sid: Allow access for Key TeamRole
          Effect: Allow
          Principal:
            AWS: !If [ condEventEngine, !Sub "arn:aws:iam::${AWS::AccountId}:assumed-role/TeamRole/MasterKey", !Sub "arn:aws:iam::${AWS::AccountId}:root" ]
          Action:
          - kms:Create*
          - kms:Describe*
          - kms:Enable*
          - kms:List*
          - kms:Put*
          - kms:Update*
          - kms:Revoke*
          - kms:Disable*
          - kms:Get*
          - kms:Delete*
          - kms:ImportKeyMaterial
          - kms:TagResource
          - kms:UntagResource
          - kms:ScheduleKeyDeletion
          - kms:CancelKeyDeletion
          - kms:ReplicateKey
          - kms:UpdatePrimaryRegion
          Resource: "*"
        - Sid: Allow use of the key
          Effect: Allow
          Principal:
            AWS: !If [ condEventEngine, !Sub "arn:aws:iam::${AWS::AccountId}:assumed-role/TeamRole/MasterKey", !Sub "arn:aws:iam::${AWS::AccountId}:root" ]
          Action:
          - kms:Encrypt
          - kms:Decrypt
          - kms:ReEncrypt*
          - kms:GenerateDataKey*
          - kms:DescribeKey
          Resource: "*"
        - Sid: Allow attachment of persistent resources
          Effect: Allow
          Principal:
            AWS: !If [ condEventEngine, !Sub "arn:aws:iam::${AWS::AccountId}:assumed-role/TeamRole/MasterKey", !Sub "arn:aws:iam::${AWS::AccountId}:root" ]
          Action:
          - kms:CreateGrant
          - kms:ListGrants
          - kms:RevokeGrant
          Resource: "*"
          Condition:
            Bool:
              kms:GrantIsForAWSResource: 'true'
      Tags:
        - Key: Name
          Value: !If [ condEventEngine, "auroralab-mysql-mregion-key", !Sub "${AWS::StackName}-auroralab-mysql-mregion-key" ]

## Create KMS key alias in the primary region
  dbclusterkeyAlias:
    Type: AWS::KMS::Alias
    Condition: condIsNotSecondary
    DependsOn: dbclusterkey
    Properties:
      AliasName: !If [ condEventEngine, "alias/auroralab-mysql-db-key", !Sub "alias/${AWS::StackName}-auroralab-mysql-db-key" ]
      TargetKeyId: !Ref dbclusterkey

## Create Aurora cluster
  dbCluster:
    Type: "AWS::RDS::DBCluster"
    DependsOn: dbclusterkey
    Condition: condDeployDBCluster
    Properties:
      Engine: !FindInMap [ ClusterSettings, global, dbEngine ]
      EngineVersion: !FindInMap [ ClusterSettings, global, dbVersion ]
      DBSubnetGroupName: !Ref dbSubnets
      DBClusterParameterGroupName: !Ref cpgClusterParams
      DBClusterIdentifier: !If [ condEventEngine, "auroralab-mysql-cluster", !Sub "${AWS::StackName}-mysql-cluster" ]
      BackupRetentionPeriod: 1
      MasterUsername: !Join ["", ["{{resolve:secretsmanager:", !Ref secretClusterAdminUser, ":SecretString:username}}" ]]
      MasterUserPassword: !Join ["", ["{{resolve:secretsmanager:", !Ref secretClusterAdminUser, ":SecretString:password}}" ]]
      DatabaseName: !FindInMap [ ClusterSettings, global, dbSchema ]
      StorageEncrypted: true
      VpcSecurityGroupIds: [ !Ref dbClusterSecGroup ]
      EnableCloudwatchLogsExports: [ error, slowquery ]
      BacktrackWindow: !If [ condEnableBacktrack, 86400, 0 ]
      KmsKeyId: !GetAtt dbclusterkey.Arn
      EnableIAMDatabaseAuthentication: true
      AssociatedRoles:
        - RoleArn: !GetAtt roleServiceIntegration.Arn
      Tags:
        - Key: Name
          Value: !If [ condEventEngine, "auroralab-mysql-cluster", !Sub "${AWS::StackName}-mysql-cluster" ]

## Deploy cluster node #1 (may or may not be writer depending which one initializes first)
  dbNode1:
    Type: "AWS::RDS::DBInstance"
    Condition: condDeployDBCluster
    Properties:
      DBClusterIdentifier: !Ref dbCluster
      DBInstanceIdentifier: !If [ condEventEngine, "auroralab-mysql-node-1", !Sub "${AWS::StackName}-mysql-node-1" ]
      CopyTagsToSnapshot: true
      DBInstanceClass: !FindInMap [ RegionalSettings, !Ref "AWS::Region", nodeType ]
      Engine: !FindInMap [ ClusterSettings, global, dbEngine ]
      MonitoringInterval: 1
      MonitoringRoleArn: !GetAtt roleEnhancedMonitoring.Arn
      PubliclyAccessible: false
      EnablePerformanceInsights: true
      PerformanceInsightsRetentionPeriod: 7
      Tags:
        - Key: Name
          Value: !If [ condEventEngine, "auroralab-mysql-node-1", !Sub "${AWS::StackName}-mysql-node-1" ]

## Deploy cluster node #2 (may or may not be writer depending which one initializes first)
  dbNode2:
    Type: "AWS::RDS::DBInstance"
    Condition: condDeployDBCluster
    Properties:
      DBClusterIdentifier: !Ref dbCluster
      DBInstanceIdentifier: !If [ condEventEngine, "auroralab-mysql-node-2", !Sub "${AWS::StackName}-mysql-node-2" ]
      CopyTagsToSnapshot: true
      DBInstanceClass: !FindInMap [ RegionalSettings, !Ref "AWS::Region", nodeType ]
      Engine: !FindInMap [ ClusterSettings, global, dbEngine ]
      MonitoringInterval: 1
      MonitoringRoleArn: !GetAtt roleEnhancedMonitoring.Arn
      PubliclyAccessible: false
      EnablePerformanceInsights: true
      PerformanceInsightsRetentionPeriod: 7
      Tags:
        - Key: Name
          Value: !If [ condEventEngine, "auroralab-mysql-node-2", !Sub "${AWS::StackName}-mysql-node-2" ]

## Role to overcome current limitations in CFN ScalableTarget implemetation
## This role is *NOT* actively used by any resource and service, but must be present
  roleScalableTarget:
    Type: "AWS::IAM::Role"
    Condition: condDeployDBCluster
    Properties:
      RoleName: !If [ condEventEngine, !Sub "auroralab-scaling-${AWS::Region}", !Sub "${AWS::StackName}-scaling-${AWS::Region}" ]
      Description: "Role to integrate the Aurora DB cluster with Application AutoScaling for read replica auto scaling."
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - "sts:AssumeRole"
            Principal:
              Service:
                - "rds.application-autoscaling.amazonaws.com"
      Tags:
        - Key: Name
          Value: !If [ condEventEngine, !Sub "auroralab-scaling-${AWS::Region}", !Sub "${AWS::StackName}-scaling-${AWS::Region}" ]

## Register the scalable target
## Bug fix: when the stack name contains uppercase letters,
## the DB cluster identifier is actually lowercased, but the resource ID
## still contains uppercase, so you get a mismatch on the scalable target ResourceId
  dbScalableTarget:
    Type: "AWS::ApplicationAutoScaling::ScalableTarget"
    Condition: condDeployDBCluster
    DependsOn: [ dbNode1, dbNode2 ]
    Properties:
      ServiceNamespace: rds
      ScalableDimension: "rds:cluster:ReadReplicaCount"
      ResourceId: !GetAtt resLabSupport.DBClusterScalableTarget
      MaxCapacity: !FindInMap [ ClusterSettings, scaling, maxCapacity ]
      MinCapacity: !FindInMap [ ClusterSettings, scaling, minCapacity ]
      RoleARN: !GetAtt roleScalableTarget.Arn

## Add scaling policy
  dbScalingPolicy:
    Type: "AWS::ApplicationAutoScaling::ScalingPolicy"
    Condition: condDeployDBCluster
    Properties:
      PolicyName: !If [ condEventEngine, "auroralab-autoscale-readers", !Sub "${AWS::StackName}-autoscale-readers" ]
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref dbScalableTarget
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: RDSReaderAverageCPUUtilization
        ScaleInCooldown: 180
        ScaleOutCooldown: 180
        TargetValue: !FindInMap [ ClusterSettings, scaling, cpuLoadTarget ]

## Create sysbench prep SSM document
  ssmDocSysbenchTest:
    Type: "AWS::SSM::Document"
    Properties:
      DocumentType: Command
      Name: !If [ condEventEngine, "auroralab-sysbench-test", !Sub "${AWS::StackName}-sysbench-test" ]
      Tags:
        - Key: Name
          Value: !If [ condEventEngine, "auroralab-sysbench-test", !Sub "${AWS::StackName}-sysbench-test" ]
      Content:
        schemaVersion: '2.2'
        description: "SysBench Percona TPCC-LIKE Preparation"
        parameters:
          clusterEndpoint:
            type: String
            description: "Aurora Cluster Endpoint"
            default: !If [ condDeployDBCluster, !GetAtt dbCluster.Endpoint.Address, "" ]
          dbUser:
            type: String
            description: "DB User"
            default: !If [ condDeployDBCluster, !Join [ "", [ "{{resolve:secretsmanager:", !Ref secretClusterAdminUser, ":SecretString:username}}" ] ], "" ]
          dbPassword:
            type: String
            description: "DB Password"
            default: !If [ condDeployDBCluster, !Join [ "", [ "{{resolve:secretsmanager:", !Ref secretClusterAdminUser, ":SecretString:password}}" ] ], "" ]
          dbSchema:
            type: String
            description: "DB Schema"
            default: !FindInMap [ ClusterSettings, sysbench, dbSchema ]
          dbDriver:
            type: String
            description: "DB Driver"
            default: !FindInMap [ ClusterSettings, global, dbDriver ]
            allowedValues: [ mysql, pgsql ]
          runTime:
            type: String
            description: "Test Runtime"
            default: !FindInMap [ ClusterSettings, sysbench, runTime ]
          numThreads:
            type: String
            description: Threads
            default: !FindInMap [ ClusterSettings, sysbench, numThreads ]
          numTables:
            type: String
            description: Tables
            default: !FindInMap [ ClusterSettings, sysbench, numTables ]
          numScale:
            type: String
            description: Scale
            default: !FindInMap [ ClusterSettings, sysbench, numWarehouses ]
        mainSteps:
        - action: aws:runShellScript
          name: SysBenchTpccPrepare
          inputs:
            runCommand:
            - 'echo "DROP SCHEMA IF EXISTS {{ dbSchema }}; CREATE SCHEMA {{ dbSchema }};" | mysql -h{{ clusterEndpoint }} -u{{ dbUser }} -p"{{ dbPassword }}" && cd /home/ec2-user/environment/sysbench-tpcc && ./tpcc.lua --mysql-host={{ clusterEndpoint }} --mysql-user={{ dbUser }} --mysql-password="{{ dbPassword }}" --mysql-db={{ dbSchema }} --threads={{ numThreads }} --tables={{ numTables }} --scale={{ numScale }} --time={{ runTime }} --db-driver={{ dbDriver }} prepare'
        - action: aws:runShellScript
          name: SysBenchTpccRun
          inputs:
            runCommand:
            - 'cd /home/ec2-user/environment/sysbench-tpcc && ./tpcc.lua --mysql-host={{ clusterEndpoint }} --mysql-user={{ dbUser }} --mysql-password="{{ dbPassword }}" --mysql-db={{ dbSchema }} --mysql-ignore-errors=all --threads={{ numThreads }} --tables={{ numTables }} --scale={{ numScale }} --time={{ runTime }} --db-driver={{ dbDriver }} run'

## Create a role for the notebook.
  roleMLNotebook:
    Type: "AWS::IAM::Role"
    Condition: condDeployMLResources
    Properties:
      RoleName: !If [ condEventEngine, !Sub "auroralab-ml-${AWS::Region}", !Sub "${AWS::StackName}-ml-${AWS::Region}" ]
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - "sts:AssumeRole"
            Principal:
              Service:
                - "sagemaker.amazonaws.com"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AmazonSageMakerFullAccess"
      Policies:
        - PolicyName: inline-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "s3:ListBucket"
                  - "s3:GetObject"
                  - "s3:GetObjectVersion"
                  - "s3:DeleteObject"
                  - "s3:ListMultipartUploadParts"
                  - "s3:PutObject"
                Resource:
                  - "arn:aws:s3:::*/*"
                  - "arn:aws:s3:::*"
      Tags:
        - Key: Name
          Value: !If [ condEventEngine, !Sub "auroralab-ml-${AWS::Region}", !Sub "${AWS::StackName}-ml-${AWS::Region}" ]

## Create a Sagemaker Lifecycle hook, which will clone the github repo and get the Jupyter notebook and other resources needed to build the model.
## using nohup, so the script keeps running after 5 minutes. The onstart event fails, if script doesn't finish in 5 minutes.
  smMLNotebookHook:
    Type: "AWS::SageMaker::NotebookInstanceLifecycleConfig"
    Condition: condDeployMLResources
    Properties:
      NotebookInstanceLifecycleConfigName: !If [ condEventEngine, "auroralab-notebook-hook", !Sub "${AWS::StackName}-notebook-hook" ]
      OnCreate:
        - Content:
            Fn::Base64: !Sub |
              #!/bin/bash

              set -e
              sudo -u ec2-user -i <<EOF
              unset SUDO_UID
              python3 -m pip install sagemaker boto3 sagemaker_containers
              cd /home/ec2-user/SageMaker/
              wget https://[[website]]/support/notebook_churn.py
              wget https://[[website]]/support/sample_churn_data.zip
              sed -i "s%mlbucketplaceholder%${bucketLabData}%" notebook_churn.py
              sudo mkdir -p /opt/ml/code/
              cd /home/ec2-user/SageMaker/
              unzip -o sample_churn_data.zip
              nohup ipython notebook_churn.py>nohup.out &

## Create the Sagemake Jupyter book if the lab condition allows it.
  smMLNotebook:
    Type: "AWS::SageMaker::NotebookInstance"
    Condition: condDeployMLResources
    Properties:
      InstanceType: !FindInMap [ MLSettings, global, notebookType ]
      RootAccess: Enabled
      RoleArn: !GetAtt roleMLNotebook.Arn
      NotebookInstanceName: !If [ condEventEngine, "auroralab-notebook", !Sub "${AWS::StackName}-notebook" ]
      LifecycleConfigName: !GetAtt smMLNotebookHook.NotebookInstanceLifecycleConfigName
      Tags:
        - Key: Name
          Value: !If [ condEventEngine, "auroralab-notebook", !Sub "${AWS::StackName}-notebook" ]

## Create role for use with the lab support function
  roleLabSupport:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: !If [ condEventEngine, !Sub "auroralab-support-${AWS::Region}", !Sub "${AWS::StackName}-support-${AWS::Region}" ]
      Description: "Role to permit the Lambda support functions to interact with relevant AWS APIs."
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - "sts:AssumeRole"
            Principal:
              Service:
                - "lambda.amazonaws.com"
      Policies:
        - PolicyName: inline-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "arn:aws:logs:*:*:*"
              - Effect: Allow
                Action:
                  - cloudformation:DescribeStacks
                  - cloudformation:DescribeStackEvents
                  - cloudformation:DescribeStackResource
                  - cloudformation:DescribeStackResources
                  - ec2:DescribeInstances
                  - ec2:AssociateIamInstanceProfile
                  - ec2:ModifyInstanceAttribute
                  - ec2:ReplaceIamInstanceProfileAssociation
                  - ec2:DescribeIamInstanceProfileAssociations
                  - ec2:DisassociateIamInstanceProfile
                  - ec2:ModifyInstanceAttribute
                  - ec2:ReplaceIamInstanceProfileAssociation
                  - iam:ListInstanceProfiles
                  - iam:PassRole
                  - ssm:DescribeInstanceInformation
                  - ssm:SendCommand
                  - cloud9:UpdateEnvironment
                  - cloud9:UpdateEnvironmentSettings
                  - cloud9:DescribeEnvironments
                  - cloud9:ListEnvironments
                Resource: "*"
      Tags:
        - Key: Name
          Value: !If [ condEventEngine, !Sub "auroralab-support-${AWS::Region}", !Sub "${AWS::StackName}-support-${AWS::Region}" ]

## Create Lambda function to implement support operations
  funcLabSupport:
    Type: "AWS::Lambda::Function"
    DependsOn: [ c9ClientIDE ]
    Properties:
      FunctionName: !If [ condEventEngine, "auroralab-support", !Sub "${AWS::StackName}-support" ]
      Description: "Custom Resource to provide support operations for the Aurora MySQL labs."
      Handler: "index.handler"
      Role: !GetAtt roleLabSupport.Arn
      Runtime: "python3.8"
      Timeout: 600
      Tags:
        - Key: Name
          Value: !If [ condEventEngine, "auroralab-support", !Sub "${AWS::StackName}-support" ]
      Environment:
        Variables:
          REGION: !Ref "AWS::Region"
          ANALYTICSURI: "https://[[apigw]]/v1/track"
      Code:
        ZipFile: |
          # Dependencies
          from os import environ
          import cfnresponse
          import boto3
          import urllib3
          import json
          import datetime
          import time

          print("[INFO]", "Initialize function")
          session = boto3.session.Session(region_name=environ["REGION"])
          ide = session.resource('ec2')
          ec2 = session.client('ec2')
          ssm = session.client('ssm')
          cl9ide = session.client('cloud9')
          http = urllib3.PoolManager()

          # Lambda handler function / main function
          def handler(event, context):
            print("[INFO]", "Invocation start")

            # init response
            props = event["ResourceProperties"]
            response_status = cfnresponse.FAILED
            response_data = {}

            # try/catch
            try:
              # lowercase names, set response as success
              response_data["DBClusterId"] = props["Cluster"].lower()
              response_data["DBClusterScalableTarget"] = "cluster:%s" % response_data["DBClusterId"]
              print("[INFO]", "ScalableTarget computed:", response_data["DBClusterScalableTarget"])

              # only send analytics if agreed
              if event["ResourceProperties"]["AgreeTracking"] == 'Yes':
                # try/catch
                try:
                  # track analytics
                  payload = {
                    'stack_uuid': props["StackUUID"] if ("StackUUID" in props) else None,
                    'stack_name': props["StackName"] if ("StackName" in props) else None,
                    'stack_region': props["StackRegion"] if ("StackRegion" in props) else None,
                    'deployed_cluster': props["DeployedCluster"] if ("DeployedCluster" in props) else None,
                    'deployed_ml': props["DeployedML"] if ("DeployedML" in props) else None,
                    'deployed_gdb': props["DeployedGDB"] if ("DeployedGDB" in props) else None,
                    'is_secondary': props["IsSecondary"] if ("IsSecondary" in props) else None,
                    'event_timestamp': datetime.datetime.utcnow().isoformat() + 'Z',
                    'event_scope': 'Stack',
                    'event_action': event["RequestType"] if "RequestType" in event else None,
                    'event_message': "Stack-level operation",
                    'ee_event_id': props["EEEventId"] if ("EEEventId" in props) else None,
                    'ee_team_id': props["EETeamId"] if ("EETeamId" in props) else None,
                    'ee_module_id': props["EEModuleId"] if ("EEModuleId" in props) else None,
                    'ee_module_version': props["EEModuleVersion"] if ("EEModuleVersion" in props) else None
                  }
                  r = http.request('POST', environ["ANALYTICSURI"], body=json.dumps(payload).encode('utf-8'), headers={'Content-Type': 'application/json'})
                  print("[INFO]", "Event tracking for UUID:", payload["stack_uuid"])
                except Exception as e:
                  # errors in tracker interaction should not prevent operation of the function in critical path
                  print("[ERROR]", e)
              else:
                print("[INFO]", "Opted out of analytics")

              # on stack creation
              if event["RequestType"] == 'Create':
                # wait until Cloud9 instance is available
                print("[INFO]", "Instance filter to use:", props['IDEEnvTagName'])
                result = ec2.describe_instances(Filters=[{'Name': 'tag:Name','Values': [props['IDEEnvTagName']]}])
                if ('Reservations' in result and len(result['Reservations']) > 0):
                  c9 = result['Reservations'][0]['Instances'][0]
                  print("[INFO]", "Found IDE instance", c9['InstanceId'])
                  while c9['State']['Name'] != 'running':
                    time.sleep(5)
                    c9 = ec2.describe_instances(InstanceIds=[c9['InstanceId']])['Reservations'][0]['Instances'][0]

                  # swap the profiles
                  prof = {
                    'Arn': props['IDEProfileArn'],
                    'Name': props['IDEProfileName']
                  }

                  # find iam instance profile association
                  result = ec2.describe_iam_instance_profile_associations(
                    Filters=[{'Name': 'instance-id', 'Values': [c9['InstanceId']]}]
                  )
                  if ('IamInstanceProfileAssociations' in result and len(result['IamInstanceProfileAssociations']) > 0):
                    assoc = result['IamInstanceProfileAssociations'][0]
                    print("[INFO]", "Replacing IAM profile association:", assoc['AssociationId'])
                    response = ec2.replace_iam_instance_profile_association(IamInstanceProfile=prof, AssociationId=assoc['AssociationId'])
                  else:
                    print("[INFO]", "Associating new IAM profile")
                    response = ec2.associate_iam_instance_profile(IamInstanceProfile=prof, InstanceId=c9['InstanceId'])

                  # attach workstation security group
                  attached_sgs = [sg['GroupId'] for sg in ide.Instance(c9['InstanceId']).security_groups]
                  attached_sgs.append(props["IDESecGroupId"])
                  response = ide.Instance(c9['InstanceId']).modify_attribute(Groups=attached_sgs)
                  print("[INFO]", "Attached SGs:", attached_sgs)

                  # wait for ssm registration
                  status = 'Offline'
                  tries = 0
                  while status != 'Online' and tries < 50:
                    response = ssm.describe_instance_information(Filters=[{'Key': 'InstanceIds', 'Values': [c9['InstanceId']]}])
                    if ('InstanceInformationList' in response and len(response['InstanceInformationList']) > 0):
                      status = response['InstanceInformationList'][0]['PingStatus']
                    tries += 1
                    time.sleep(10)
                  
                  # run ssm bootstrap
                  if status == 'Online':
                    response = ssm.send_command(InstanceIds=[c9['InstanceId']],DocumentName=props["IDEBoostrapDoc"])
                    print("[INFO]", "Started IDE bootstrap:", response)
                  else:
                    print("[ERROR]", "Timeout exceeded waiting for SSM registration")
                
              # success
              response_status = cfnresponse.SUCCESS
              
            except Exception as e:
              print("[ERROR]", e)

            # try/catch
            try:
              # send response to CloudFormation
              cfnresponse.send(event, context, response_status, response_data)
            except Exception as e:
              print("[ERROR]", e)
              response_status = cfnresponse.FAILED
            print("[INFO]", "Invocation end")
            return response_status

## Custom resource to assign cluster IAM role
  resLabSupport:
    Type: "Custom::resLabSupport"
    Properties:
      ServiceToken: !GetAtt funcLabSupport.Arn
      StackRegion: !Ref "AWS::Region"
      StackName: !Ref "AWS::StackName"
      StackUUID: !Select
        - 2
        - !Split
          - "/"
          - !Ref "AWS::StackId"
      AgreeTracking: !Ref agreeTracking
      DeployedCluster: !If [ condDeployDBCluster, "Yes", "No" ]
      DeployedML: !If [ condDeployMLResources, "Yes", "No" ]
      DeployedGDB: !If [ condDeployGDBResources, "Yes", "No" ]
      IsSecondary: !Ref isSecondary
      Cluster: !If [ condDeployDBCluster, !Ref dbCluster, "" ]
      EEEventId: !Ref EEEventId
      EETeamId: !Ref EETeamId
      EEModuleId: !Ref EEModuleId
      EEModuleVersion: !Ref EEModuleVersion
      IDEProfileArn: !GetAtt profileClientIDE.Arn
      IDEProfileName: !Ref profileClientIDE
      IDEEnvTagName: !If [ condEventEngine, !Sub "aws-cloud9-auroralab-client-ide-${c9ClientIDE}", !Sub "aws-cloud9-${AWS::StackName}-client-ide-${c9ClientIDE}" ]
      IDESecGroupId: !Ref clientSecGroup
      IDEBoostrapDoc: !Ref ssmDocClientBootstrap

## Create role for use with the lab account function
  roleLabAccount:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: !If [ condEventEngine, !Sub "auroralab-account-${AWS::Region}", !Sub "${AWS::StackName}-account-${AWS::Region}" ]
      Description: "Role to permit the Lambda account functions to interact with relevant AWS APIs."
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - "sts:AssumeRole"
            Principal:
              Service:
                - "lambda.amazonaws.com"
      Policies:
        - PolicyName: inline-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "arn:aws:logs:*:*:*"
              - Effect: Allow
                Action:
                  - "s3:ListBucket"
                  - "s3:GetObject"
                  - "s3:GetObjectVersion"
                  - "s3:DeleteObject"
                  - "s3:DeleteObjects"
                  - "s3:ListMultipartUploadParts"
                  - "s3:PutObject"
                  - "s3:ListObjects"
                  - "s3:ListObjectsV2"
                  - "s3:ListObjectVersions"
                Resource:
                  - !Sub "arn:aws:s3:::${bucketLabData}/*"
                  - !Sub "arn:aws:s3:::${bucketLabData}"
              - Effect: Allow
                Action:
                  - iam:CreateInstanceProfile
                  - iam:GetRole
                  - iam:PassRole
                  - iam:GetInstanceProfile
                  - iam:ListRoles
                  - iam:CreateRole
                  - iam:AttachRolePolicy
                  - iam:ListInstanceProfiles
                  - iam:AddRoleToInstanceProfile
                Resource: "*"
      Tags:
        - Key: Name
          Value: !If [ condEventEngine, !Sub "auroralab-account-${AWS::Region}", !Sub "${AWS::StackName}-account-${AWS::Region}" ]

## Create Lambda function to implement conditional initialization and cleanup of accounts
  funcLabAccount:
    Type: "AWS::Lambda::Function"
    DependsOn: [ bucketLabData ]
    Properties:
      FunctionName: !If [ condEventEngine, "auroralab-account", !Sub "${AWS::StackName}-account" ]
      Description: "Custom Resource to provide account initialization and cleanup for the Aurora MySQL labs."
      Handler: "index.handler"
      Role: !GetAtt roleLabAccount.Arn
      Runtime: "python3.8"
      Timeout: 600
      Tags:
        - Key: Name
          Value: !If [ condEventEngine, "auroralab-account", !Sub "${AWS::StackName}-account" ]
      Environment:
        Variables:
          REGION: !Ref "AWS::Region"
      Code:
        ZipFile: |
          # Dependencies
          from os import environ
          import cfnresponse
          import boto3
          import urllib3
          import json
          import datetime
          import time

          print("[INFO]", "Initialize function")
          session = boto3.session.Session(region_name=environ["REGION"])
          s3 = session.resource('s3')
          iam = session.client('iam')

          # Lambda handler function / main function
          def handler(event, context):
            print("[INFO]", "Invocation start")

            # init response
            props = event["ResourceProperties"]
            response_status = cfnresponse.FAILED
            response_data = {}

            # try/catch
            try:
              # on stack creation
              if event["RequestType"] == 'Create':
                # does the Cloud9 standard role exist?
                missing = False
                try:
                  response = iam.get_role(RoleName='AWSCloud9SSMAccessRole')
                  print("[INFO]", "IAM role exists:", "AWSCloud9SSMAccessRole")
                except iam.exceptions.NoSuchEntityException:
                  missing = True
                except Exception as e:
                  print("[ERROR]", e)

                # create it if it doesn't exist
                if missing:
                  response = iam.create_role(
                    Path='/service-role/',
                    RoleName='AWSCloud9SSMAccessRole',
                    AssumeRolePolicyDocument='{"Version": "2012-10-17","Statement": [{"Effect": "Allow","Principal": {"Service": ["ec2.amazonaws.com","cloud9.amazonaws.com"]},"Action": "sts:AssumeRole"}]}'
                  )
                  response = iam.attach_role_policy(
                    RoleName='AWSCloud9SSMAccessRole',
                    PolicyArn='arn:aws:iam::aws:policy/AWSCloud9SSMInstanceProfile'
                  )
                  response = iam.attach_role_policy(
                      RoleName='AWSCloud9SSMAccessRole',
                      PolicyArn='arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore'
                  )
                  print("[INFO]", "Created IAM role:", "AWSCloud9SSMAccessRole")

                # does the Cloud9 standard instance profile exist?
                missing = False
                try:
                  response = iam.get_instance_profile(InstanceProfileName='AWSCloud9SSMInstanceProfile')
                  print("[INFO]", "IAM instance profile exists:", "AWSCloud9SSMInstanceProfile")
                except iam.exceptions.NoSuchEntityException:
                  missing = True
                except Exception as e:
                  print("[ERROR]", e)

                # create it if it doesn't exit
                if missing:
                  response = iam.create_instance_profile(
                    InstanceProfileName='AWSCloud9SSMInstanceProfile',
                    Path='/cloud9/'
                  )
                  response = iam.add_role_to_instance_profile(
                    InstanceProfileName='AWSCloud9SSMInstanceProfile',
                    RoleName='AWSCloud9SSMAccessRole'
                  )
                  print("[INFO]", "Created IAM instance profile:", "AWSCloud9SSMInstanceProfile")

              # on stack deletion
              if event["RequestType"] == 'Delete':
                # delete all objects out of the bucket
                bucket = s3.Bucket(props["DataBucket"])
                bucket.objects.delete()
                print("[INFO]", "Bucket cleaned up for:", props["DataBucket"])

              # success
              response_status = cfnresponse.SUCCESS

            except Exception as e:
              print("[ERROR]", e)

            # try/catch
            try:
              # send response to CloudFormation
              cfnresponse.send(event, context, response_status, response_data)
            except Exception as e:
              print("[ERROR]", e)
              response_status = cfnresponse.FAILED
            print("[INFO]", "Invocation end")
            return response_status

## Custom resource to implement initialization and cleanup of account
  resLabAccount:
    Type: "Custom::resLabAccount"
    Properties:
      ServiceToken: !GetAtt funcLabAccount.Arn
      DataBucket: !Ref bucketLabData
      StackRegion: !Ref "AWS::Region"
      StackName: !Ref "AWS::StackName"
      StackUUID: !Select
        - 2
        - !Split
          - "/"
          - !Ref "AWS::StackId"
      EEModuleId: !Ref EEModuleId
      EEModuleVersion: !Ref EEModuleVersion

## Wait condition to signal bootstrap completion
  bootstrapWaitHandle:
    Type: "AWS::CloudFormation::WaitConditionHandle"
  bootstrapWaitCondition:
    Type: "AWS::CloudFormation::WaitCondition"
    DependsOn: [ resLabSupport ]
    Properties: 
      Count: 1
      Handle: !Ref bootstrapWaitHandle
      Timeout: 1800

## Outputs
Outputs:
  vpcId:
    Description: "Aurora Lab VPC"
    Value: !Ref vpc
  clientIdeUrl:
    Description: "Cloud9 Client IDE"
    Value: !Sub "https://${AWS::Region}.console.aws.amazon.com/cloud9/ide/${c9ClientIDE}?region=${AWS::Region}"
  clusterName:
    Description: "Aurora Cluster Name"
    Value: !If [ condDeployDBCluster, !Ref dbCluster, "" ]
  clusterEndpoint:
    Description: "Aurora Cluster Endpoint"
    Value: !If [ condDeployDBCluster, !GetAtt dbCluster.Endpoint.Address, "" ]
  readerEndpoint:
    Description: "Aurora Reader Endpoint"
    Value: !If [ condDeployDBCluster, !GetAtt dbCluster.ReadEndpoint.Address, "" ]
  loadTestRunDoc:
    Description: "Load Test Execution Command Document"
    Value: !Ref ssmDocSysbenchTest
  dbSubnetGroup:
    Description: "Database Subnet Group"
    Value: !Ref dbSubnets
  dbSecurityGroup:
    Description: "Database Security Group"
    Value: !Ref dbClusterSecGroup
  secretArn:
    Description: "Database Credentials Secret ARN"
    Value: !If [ condDeployDBCluster, !Ref secretClusterAdminUser, "" ]
  s3BucketName:
    Description: "S3 Bucket Name for SageMaker training data"
    Value: !Ref bucketLabData
  notebookName:
    Description: "Jupytr Notebook Name"
    Value: !If [ condDeployMLResources, !Ref smMLNotebook, "" ]
  supersetURL:
    Description: "Apache Superset URL"
    Value: !If [ condDeployGDBResources, !Sub "http://${supersetHost.PublicDnsName}/", "" ]
  supersetUsername:
    Description: "Apache Superset Username"
    Value: !If [ condDeployGDBResources, !FindInMap [ GDBSettings, superset, username ], "" ]
  supersetPassword:
    Description: "Apache Superset Password"
    Value: !If [ condDeployGDBResources, !FindInMap [ GDBSettings, superset, password ], "" ]